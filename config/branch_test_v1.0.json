{
    "agent": {
        "layers": [
            "# These layers should describe all but the input and output layers. Those are handled by the system.",
            "# Reduce incoming 6D tensor to 5D by merging channels (dim 1) and one-hot (dim 5):",
            "keras.layers.Permute((2, 3, 4, 1, 5))",
            "keras.layers.Reshape(({observation_width}, {observation_height}, {observation_width}, 2*{num_inputs}))",
            "# Convolve each input, treating the blueprint and world state as separate channels",
            "keras.layers.Conv3D(8, (3, 3, 3), padding='same', data_format='channels_last', activation='relu')",
            "keras.layers.Conv3D(8, (3, 3, 3), padding='same', data_format='channels_last', activation='relu')",
            "# max-pool features together a bit:",
            "keras.layers.MaxPooling3D(pool_size=(5, 1, 5), data_format='channels_last')",
            "# Flatten, ready for fully-connected layers:",
            "keras.layers.Flatten()",
            "# Do some thinking:",
            [
              "# This splits the model into two branches:",
              [
                "# This is the value branch:",
                "keras.layers.Dense(16, activation='relu')",
                "keras.layers.Dense(1, activation='relu')"
              ],
              [
                "# This is the advantage branch:",
                "keras.layers.Dense(16, activation='relu')",
                "keras.layers.Dense({num_actions}, activation='relu')"
              ],
              "# This merges the model:",
              "M:keras.layers.Lambda(lambda x: x[1]-K.mean(x[1])+x[0], ({num_actions},))"
            ],
            "# Final layer to clean up merge",
            "keras.layers.Dense({num_actions}, activation='linear')"
        ],
        "auto_final_layer": false,
        "use_full_observation": false,
        "observation_width": 5,
        "observation_height": 3,
        "non_sequnetial": true
    },
    "training": {
        "num_episodes": 1000,
        "save_frequency": 50,
        "max_episode_time": 3,
        "initial_epsilon": 0.8,
        "final_epsilon": 0.005,
        "overclock_factor": 5,
        "save_history": false,
        "train_on_history": false,
        "history": {
            "batch_size": 512,
            "batches": 32,
            "epochs": 32
        },
        "reward_weight": {
            "base": -0.002,
            "distance": 0.001,
            "facing_incomplete": 0.001,
            "place_necessary": 0.5,
            "place_superfluous": -0.5,
            "attack_floor": -1,
            "leave_arena": -1,
            "mission_complete": 1
        }
    },
    "curriculum": {
        "observation_period": 15,
        "max_lesson_length": 1200,
        "lessons": [
            {
                "name": "in_front",
                "params": {},
                "max_episodes": 200,
                "max_episode_time": 1,
                "set_learning_schedule": true
            },
            {
                "name": "turn",
                "params": {},
                "max_episodes": 400,
                "max_episode_time": 1,
                "target_reward": 0.95,
                "set_learning_schedule": true
            },
            {
                "name": "approach",
                "params": {
                    "max_distance": 3
                },
                "max_episodes": 400,
                "max_episode_time": 1.5,
                "target_reward": 0.95,
                "set_learning_schedule": true
            },
            {
                "name": "lessonA",
                "params": {
                    "k": 2
                },
                "max_episodes": 600,
                "max_episode_time": 3,
                "set_learning_schedule": true
            },
            {
                "name": "lessonB",
                "params": {},
                "max_episodes": 600,
                "max_episode_time": 3,
                "set_learning_schedule": true
            }
        ]
    },
    "arena": {
        "width": 5,
        "height": 1,
        "length": 5,
        "anchor": {
            "x": 0,
            "y": 5,
            "z": 0
        },
        "offset": {
            "x": 0.5,
            "y": 0,
            "z": 0.5
        }
    },
    "inputs": ["air", "stone"],
    "actions": ["jumpmove 1", "turn 1", "turn -1", "use", "attack"]
}
